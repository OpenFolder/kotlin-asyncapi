{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'clientId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 89,
        "length": 8,
        "offset": 46,
        "surroundingCode": "\n    class MQTT : ServerBinding {\n        var clientId: String? = null\n        var cleanSession: Boolean? = null\n        var lastWill: LastWill? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "01a93582ab8181303d24e7755303a5799f56a13306b53b8fa06c04d1792fefbb"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'topic' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 113,
      "offset": 17,
      "length": 5,
      "code": {
        "startLine": 111,
        "length": 5,
        "offset": 42,
        "surroundingCode": "\n        class LastWill {\n            var topic: String? = null\n            var qos: Int? = null\n            var message: String? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "06bce8d6d71ea6396ccd9aca990feaa2ac2a5c3deb9ea8a66ae4d0ad3005b4a5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'heartBeatInterval' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 148,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 146,
        "length": 17,
        "offset": 100,
        "surroundingCode": "        var cipherSpec: String? = null\n        var multiEndpointServer: Boolean? = null\n        var heartBeatInterval: Int? = null\n        var bindingVersion: String? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2c49d1ba3f96c63e5959587cd466b2e8d469887607503bc59d3526ebc17b4bf2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'ccdtQueueManagerName' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 145,
      "offset": 13,
      "length": 20,
      "code": {
        "startLine": 143,
        "length": 20,
        "offset": 82,
        "surroundingCode": "    class IBMMQ : ServerBinding {\n        var groupId: String? = null\n        var ccdtQueueManagerName: String? = null\n        var cipherSpec: String? = null\n        var multiEndpointServer: Boolean? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3174ea1e59fbe241f9b4dfb79374e203e9987a99c5574b84965216a934580126"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'multiEndpointServer' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 147,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 145,
        "length": 19,
        "offset": 100,
        "surroundingCode": "        var ccdtQueueManagerName: String? = null\n        var cipherSpec: String? = null\n        var multiEndpointServer: Boolean? = null\n        var heartBeatInterval: Int? = null\n        var bindingVersion: String? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4e03d7519c149d2bc0f4bd20b5440fbb3c53cb4397b5bb856dbed79e681abcae"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'groupId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 144,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 142,
        "length": 7,
        "offset": 47,
        "surroundingCode": "\n    class IBMMQ : ServerBinding {\n        var groupId: String? = null\n        var ccdtQueueManagerName: String? = null\n        var cipherSpec: String? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "56b401dba2995d97dd006bc685049509997afb87f5b1f9d018df67902334bacd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'msgVpn' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 134,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 132,
        "length": 6,
        "offset": 90,
        "surroundingCode": "    class Solace : ServerBinding {\n        var bindingVersion: String? = null\n        var msgVpn: String? = null\n\n        fun bindingVersion(value: String): String ="
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7b3f8b6ed1c4d9db2f01d017778d0012ecbd79fd35d040e2641ea9ff2c5045fc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'qos' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 114,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 112,
        "length": 3,
        "offset": 79,
        "surroundingCode": "        class LastWill {\n            var topic: String? = null\n            var qos: Int? = null\n            var message: String? = null\n            var retain: Boolean? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "84fb11d4128cfae1235524b0b871813b34694a000eec87768e4547ba2ddebf1f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'retain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 116,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 114,
        "length": 6,
        "offset": 89,
        "surroundingCode": "            var qos: Int? = null\n            var message: String? = null\n            var retain: Boolean? = null\n\n            fun topic(value: String): String ="
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a568956627b142fa5e0b84cab3a03421702073c0e52809283cdbb614441fca13"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'keepAlive' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 92,
        "length": 9,
        "offset": 93,
        "surroundingCode": "        var cleanSession: Boolean? = null\n        var lastWill: LastWill? = null\n        var keepAlive: Int? = null\n        var bindingVersion: String? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b505475aa73a45e0fae9dcc111cd83b43b3c59710fd7de7e7dbd65bf4db064fc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'cleanSession' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 92,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 90,
        "length": 12,
        "offset": 82,
        "surroundingCode": "    class MQTT : ServerBinding {\n        var clientId: String? = null\n        var cleanSession: Boolean? = null\n        var lastWill: LastWill? = null\n        var keepAlive: Int? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c6198e2cc43e59896e01662f1c0a8121507eca96f8f007e521e45a52e4d8ca71"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'cipherSpec' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/server/ServerBinding.kt",
      "language": "kotlin",
      "line": 146,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 144,
        "length": 10,
        "offset": 97,
        "surroundingCode": "        var groupId: String? = null\n        var ccdtQueueManagerName: String? = null\n        var cipherSpec: String? = null\n        var multiEndpointServer: Boolean? = null\n        var heartBeatInterval: Int? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ee11af2f050cc06c6df0b0e2be4e12e97e8bbf37821403d3207d88269fc9681b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$ref`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nThe quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/Reference.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 3,
        "length": 6,
        "offset": 54,
        "surroundingCode": "@AsyncApiComponent\nclass Reference {\n    lateinit var `$ref`: String\n\n    fun ref(value: String): String ="
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "PropertyName"
  },
  "hash": "91292375b4bb3093effb62f4a91d1ed248b2331169260fa54a76778b29dc7170"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"sqs\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 18,
        "length": 3,
        "offset": 161,
        "surroundingCode": "    val sns: MessageBinding.SNS = MessageBinding.SNS(isDefault = true),\n    val solace: MessageBinding.Solace = MessageBinding.Solace(isDefault = true),\n    val sqs: MessageBinding.SQS = MessageBinding.SQS(isDefault = true),\n    val stomp: MessageBinding.STOMP = MessageBinding.STOMP(isDefault = true),\n    val redis: MessageBinding.Redis = MessageBinding.Redis(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "02236b76f395694f345866582e0b6e484f9b8ffa01857a04e28ac0f8129f2610"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"stomp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 19,
        "length": 5,
        "offset": 161,
        "surroundingCode": "    val solace: MessageBinding.Solace = MessageBinding.Solace(isDefault = true),\n    val sqs: MessageBinding.SQS = MessageBinding.SQS(isDefault = true),\n    val stomp: MessageBinding.STOMP = MessageBinding.STOMP(isDefault = true),\n    val redis: MessageBinding.Redis = MessageBinding.Redis(isDefault = true),\n    val mercure: MessageBinding.Mercure = MessageBinding.Mercure(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0ae56fba069d73bc9a869d05c4569986f6583afc893fac6300af0d59b8b45441"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"sns\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 16,
        "length": 3,
        "offset": 155,
        "surroundingCode": "    val nats: MessageBinding.NATS = MessageBinding.NATS(isDefault = true),\n    val jms: MessageBinding.JMS = MessageBinding.JMS(isDefault = true),\n    val sns: MessageBinding.SNS = MessageBinding.SNS(isDefault = true),\n    val solace: MessageBinding.Solace = MessageBinding.Solace(isDefault = true),\n    val sqs: MessageBinding.SQS = MessageBinding.SQS(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1ecf29aadd548b105e92b77ef9d9beb06401682916c85c27da0a5a7a105214ae"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"redis\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 20,
        "length": 5,
        "offset": 158,
        "surroundingCode": "    val sqs: MessageBinding.SQS = MessageBinding.SQS(isDefault = true),\n    val stomp: MessageBinding.STOMP = MessageBinding.STOMP(isDefault = true),\n    val redis: MessageBinding.Redis = MessageBinding.Redis(isDefault = true),\n    val mercure: MessageBinding.Mercure = MessageBinding.Mercure(isDefault = true),\n    val ibmmq: MessageBinding.IBMMQ = MessageBinding.IBMMQ(isDefault = true)"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "20b18ce96bdaa3cac2c1105b38189eb8c5c0f115554ff78f954106fcd661a4f3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"mercure\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 21,
        "length": 7,
        "offset": 164,
        "surroundingCode": "    val stomp: MessageBinding.STOMP = MessageBinding.STOMP(isDefault = true),\n    val redis: MessageBinding.Redis = MessageBinding.Redis(isDefault = true),\n    val mercure: MessageBinding.Mercure = MessageBinding.Mercure(isDefault = true),\n    val ibmmq: MessageBinding.IBMMQ = MessageBinding.IBMMQ(isDefault = true)\n)"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "234b425ab54dbec0852946fcbc9a19ba5d7ed80c1509cface3aeb45fb6e6515f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"bindingsRef\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/OperationTrait.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 16,
      "length": 11,
      "code": {
        "startLine": 51,
        "length": 11,
        "offset": 80,
        "surroundingCode": "        OperationBindings().apply(build).also { bindings = it }\n\n    inline fun bindingsRef(build: Reference.() -> Unit): Reference =\n        Reference().apply(build).also { bindings = it }\n}"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "24fa04dd5dbe2b0da09abc97588cc767a42d7f43430cb01c274a939ec3a0ee63"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"mqtt5\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 13,
        "length": 5,
        "offset": 161,
        "surroundingCode": "    val amqp1: MessageBinding.AMQP1 = MessageBinding.AMQP1(isDefault = true),\n    val mqtt: MessageBinding.MQTT = MessageBinding.MQTT(isDefault = true),\n    val mqtt5: MessageBinding.MQTT5 = MessageBinding.MQTT5(isDefault = true),\n    val nats: MessageBinding.NATS = MessageBinding.NATS(isDefault = true),\n    val jms: MessageBinding.JMS = MessageBinding.JMS(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3be4a8bffe1cd0cf7a15055743edf454e9f6d7c32e82af58afb52b5914dfb1d7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"trait\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/OperationTrait.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 8,
        "length": 5,
        "offset": 93,
        "surroundingCode": "@AsyncApiComponent\nclass ReferencableOperationTraitsList : ArrayList<Any>() {\n    inline fun trait(build: OperationTrait.() -> Unit): OperationTrait =\n        OperationTrait().apply(build).also { add(it) }\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5bc255ac86d7472a7ef20d5e742b07f2b429463381ee31a1245ec63c960810ff"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"RoomsChannel\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-examples/kotlin-asyncapi-spring-boot-example/src/main/kotlin/org/openfolder/kotlinasyncapi/example/spring/RoomChannel.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 21,
        "length": 12,
        "offset": 14,
        "surroundingCode": "    ]\n)\nclass RoomsChannel {\n\n    @Subscribe("
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-spring-boot-example",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "677dadbfeeea684b21efaa1e398b01c810db29998a8d64401528fed8751d6f79"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"trait\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/OperationTrait.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 17,
        "length": 5,
        "offset": 104,
        "surroundingCode": "@AsyncApiComponent\nclass ReferencableOperationTraitsMap : LinkedHashMap<String, Any>() {\n    inline fun trait(key: String, build: OperationTrait.() -> Unit): OperationTrait =\n        OperationTrait().apply(build).also { put(key, it) }\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "794cc4566b4dcb95974d379d6a337f6ecd5f7bc50e1644b7a195246e7cc25878"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"jms\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 15,
        "length": 3,
        "offset": 161,
        "surroundingCode": "    val mqtt5: MessageBinding.MQTT5 = MessageBinding.MQTT5(isDefault = true),\n    val nats: MessageBinding.NATS = MessageBinding.NATS(isDefault = true),\n    val jms: MessageBinding.JMS = MessageBinding.JMS(isDefault = true),\n    val sns: MessageBinding.SNS = MessageBinding.SNS(isDefault = true),\n    val solace: MessageBinding.Solace = MessageBinding.Solace(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9c9a4241b6ca271155c23501b6c81326423366f9041d71ec90a12b4844473acd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"publish\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-examples/kotlin-asyncapi-spring-boot-example/src/main/kotlin/org/openfolder/kotlinasyncapi/example/spring/RoomChannel.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 36,
        "length": 7,
        "offset": 24,
        "surroundingCode": "        ]\n    )\n    fun publish(message: String): Nothing = TODO()\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-spring-boot-example",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ab50d8dbca8d0b3a72e7f76d734bc5db55b2e8e1228f64657383e45d81003bb4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ws\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 7,
        "length": 2,
        "offset": 119,
        "surroundingCode": "    val isDefault: Boolean = false,\n    val http: MessageBinding.HTTP = MessageBinding.HTTP(isDefault = true),\n    val ws: MessageBinding.WebSockets = MessageBinding.WebSockets(isDefault = true),\n    val kafka: MessageBinding.Kafka = MessageBinding.Kafka(isDefault = true),\n    val anypointmq: MessageBinding.AnypointMQ = MessageBinding.AnypointMQ(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b4c5414bcd7c2b80f4c87e10e55500bf1edb8390fc31feabd7031df6ef89d05e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"solace\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 152,
        "surroundingCode": "    val jms: MessageBinding.JMS = MessageBinding.JMS(isDefault = true),\n    val sns: MessageBinding.SNS = MessageBinding.SNS(isDefault = true),\n    val solace: MessageBinding.Solace = MessageBinding.Solace(isDefault = true),\n    val sqs: MessageBinding.SQS = MessageBinding.SQS(isDefault = true),\n    val stomp: MessageBinding.STOMP = MessageBinding.STOMP(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b5071d261a56e14f4298df081b19ab2a6d5f7fea0019ec420dad45ecd7023877"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"nats\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 14,
        "length": 4,
        "offset": 161,
        "surroundingCode": "    val mqtt: MessageBinding.MQTT = MessageBinding.MQTT(isDefault = true),\n    val mqtt5: MessageBinding.MQTT5 = MessageBinding.MQTT5(isDefault = true),\n    val nats: MessageBinding.NATS = MessageBinding.NATS(isDefault = true),\n    val jms: MessageBinding.JMS = MessageBinding.JMS(isDefault = true),\n    val sns: MessageBinding.SNS = MessageBinding.SNS(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c04d71de388f71d9dfee8fbae255c72970033f0114e739c5d795a8ae9aae867d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"amqp1\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 11,
        "length": 5,
        "offset": 176,
        "surroundingCode": "    val anypointmq: MessageBinding.AnypointMQ = MessageBinding.AnypointMQ(isDefault = true),\n    val amqp: MessageBinding.AMQP = MessageBinding.AMQP(isDefault = true),\n    val amqp1: MessageBinding.AMQP1 = MessageBinding.AMQP1(isDefault = true),\n    val mqtt: MessageBinding.MQTT = MessageBinding.MQTT(isDefault = true),\n    val mqtt5: MessageBinding.MQTT5 = MessageBinding.MQTT5(isDefault = true),"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-annotation",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d12768745154200fa12aebea59f14ea444c6e6e26ce107f80fe0710686a128b9"
}]}