{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'termsOfService' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/info/Info.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 8,
        "length": 14,
        "offset": 77,
        "surroundingCode": "    lateinit var version: String\n    var description: String? = null\n    var termsOfService: String? = null\n    var contact: Contact? = null\n    var license: License? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8869cda4b36ba80cffc131205d07917e51154f50c6908a1d8e7ea818090c696e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'expiry' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 159,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 157,
        "length": 6,
        "offset": 88,
        "surroundingCode": "        var headers: String? = null\n        var description: String? = null\n        var expiry: Int? = null\n        var bindingVersion: String? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5912c46355867ef7f79c2d7afe1c7a7bebd03803807060971b2c338f51aea4b9"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'contentEncoding' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 134,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 132,
        "length": 15,
        "offset": 47,
        "surroundingCode": "\n    class AMQP : MessageBinding {\n        var contentEncoding: String? = null\n        var messageType: String? = null\n        var bindingVersion: String? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "13becf39c896f1a5c90f5a1ace76db31551fe1879fa9b56c39bc989666a57264"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'messageType' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/MessageBinding.kt",
      "language": "kotlin",
      "line": 135,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 133,
        "length": 11,
        "offset": 90,
        "surroundingCode": "    class AMQP : MessageBinding {\n        var contentEncoding: String? = null\n        var messageType: String? = null\n        var bindingVersion: String? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "658a8b1fab71bf6011fda990d04b56701ceb194bf85bc7947b1e781f819bb961"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'operationId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kotlin-asyncapi-core/src/main/kotlin/org/openfolder/kotlinasyncapi/model/channel/Operation.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 9,
        "length": 11,
        "offset": 45,
        "surroundingCode": "@AsyncApiComponent\nclass Operation {\n    var operationId: String? = null\n    var summary: String? = null\n    var description: String? = null"
      }
    }
  ],
  "attributes": {
    "module": "kotlin-asyncapi-core",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6f8cf850cc3f6edb5b7dab037cdae9b9528dad9faa934d6286280378c9c90619"
}]}